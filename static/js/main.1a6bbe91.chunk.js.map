{"version":3,"sources":["components/Authentication.js","components/Home.js","graphql/queries.js","graphql/mutations.js","components/SongList.js","components/AuthorList.js","components/SongForm.js","components/AuthorForm.js","App.js","hocs/AppApolloHoc.js","serviceWorker.js","index.js"],"names":["URI","concat","getUrl","isLogin","AuthorForm","_useState","useState","_useState2","Object","slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","setIsLogin","react_default","a","createElement","onSubmit","e","preventDefault","url","user","axios","post","then","res","token","data","cookies","authToken","catch","console","log","type","onClick","value","onChange","target","Home","react_router_dom","to","getSongsQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addSongMutation","mutations_templateObject","deleteSongMutation","mutations_templateObject2","addAuthorMutation","_templateObject3","compose","graphql","name","_ref","songsQuery","deleteSong","history","loading","songs","Fragment","push","map","_ref2","id","genre","key","variables","refetchQueries","query","authors","age","_ref3","GENRE_LIST","authorsQuery","addSong","setName","year","setYear","setGenre","_useState7","_useState8","authorId","setAuthorId","parseInt","option","addAuthor","setAge","App","isValidToken","isAuthenticated","setIsAuthenticated","useEffect","className","react_router","exact","path","component","SongList","AuthorList","SongForm","Authentication","SERVICE_URL","AppApolloHoc","children","userAuthToken","setUserAuthToken","client","ApolloClient","uri","headers","Authorization","subscribe","react_apollo_esm","src_App","Boolean","window","location","hostname","match","ReactDOM","render","hocs_AppApolloHoc","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a6bbe91.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { cookies } from 'brownies';\n\nconst SERVICE_URL = 'https://upgrade-songs.herokuapp.com';\nconst URI = `${SERVICE_URL}/auth`;\nconst REGISTER = '/register';\nconst LOGIN = '/login';\n\nconst getUrl = isLogin => `${URI}${isLogin ? LOGIN : REGISTER}`;\n\nfunction AuthorForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLogin, setIsLogin] = useState(false);\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    if (email && password) {\n      const url = getUrl(isLogin);\n      const user = {\n        email,\n        password\n      };\n\n      axios\n        .post(url, user)\n        .then(res => {\n          if (!isLogin) {\n            setIsLogin(true);\n            return;\n          }\n\n          const { token } = res.data;\n          cookies.authToken = token;\n        })\n        .catch(e => {\n          console.log(e);\n        });\n    }\n  }\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <button type=\"button\" onClick={() => setIsLogin(!isLogin)}>\n        Change mode\n      </button>\n      <h2>Authentication - {isLogin ? 'Login' : 'Register'}</h2>\n      <label>\n        <span>Email</span>\n        <input type=\"text\" value={email} onChange={e => setEmail(e.target.value)} />\n      </label>\n      <label>\n        <span>Password</span>\n        <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\n      </label>\n      <button type=\"submit\">{isLogin ? 'Login' : 'Register'}</button>\n    </form>\n  );\n}\n\nexport default AuthorForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Home() {\n  return (\n    <div>\n      <Link to=\"/songs\">Go to songs</Link>\n      <Link to=\"/authors\">Go to authors</Link>\n      <Link to=\"/create-song\">Create a song</Link>\n      <Link to=\"/create-author\">Create an author</Link>\n    </div>\n  );\n}\n\nexport default Home;\n","import { gql } from 'apollo-boost';\n\n// Create a literal graphiql schema\nexport const getSongsQuery = gql`\n  {\n    songs {\n      id\n      name\n      genre\n    }\n  }\n`;\n\nexport const getAuthorsQuery = gql`\n  {\n    authors {\n      id\n      name\n      age\n      songs {\n        id\n        name\n      }\n    }\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport const addSongMutation = gql`\n  mutation($name: String!, $genre: String!, $year: Int!, $authorId: ID!) {\n    addSong(name: $name, genre: $genre, year: $year, authorId: $authorId) {\n      id\n      name\n    }\n  }\n`;\n\nexport const deleteSongMutation = gql`\n  mutation($id: ID!) {\n    deleteSong(id: $id) {\n      id\n    }\n  }\n`;\n\nexport const addAuthorMutation = gql`\n  mutation($name: String!, $age: Int!) {\n    addAuthor(name: $name, age: $age) {\n      id\n      name\n    }\n  }\n`;\n","import React from 'react';\nimport { graphql, compose } from 'react-apollo';\n\nimport { getSongsQuery } from '../graphql/queries';\nimport { deleteSongMutation } from '../graphql/mutations';\n\nfunction SongList({ songsQuery, deleteSong, history }) {\n  const { loading, songs } = songsQuery;\n\n  if (loading) {\n    return <h1>Fetching songs...</h1>;\n  }\n\n  return (\n    <React.Fragment>\n      <button type=\"button\" onClick={() => history.push('/')}>\n        Go back\n      </button>\n      <ul>\n        {songs.map(({ id, name, genre }) => (\n          <li key={id}>\n            <p>Name: {name}</p>\n            <p>Genre: {genre}</p>\n            <button\n              onClick={() =>\n                deleteSong({\n                  variables: {\n                    id\n                  },\n                  refetchQueries: [{ query: getSongsQuery }]\n                })\n              }\n            >\n              Delete Song\n            </button>\n          </li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n}\n\nexport default compose(\n  graphql(getSongsQuery, { name: 'songsQuery' }),\n  graphql(deleteSongMutation, { name: 'deleteSong' })\n)(SongList);\n","import React from 'react';\nimport { graphql } from 'react-apollo';\n\nimport { getAuthorsQuery } from '../graphql/queries';\n\nfunction SongList({ data, history }) {\n  const { loading, authors } = data;\n\n  if (loading) {\n    return <h1>Fetching authors...</h1>;\n  }\n\n  return (\n    <React.Fragment>\n      <button type=\"button\" onClick={() => history.push('/')}>\n        Go back\n      </button>\n      <ul>\n        {authors.map(({ id, name, age, songs }) => (\n          <li key={id}>\n            <p>Name: {name}</p>\n            <p>Age: {age}</p>\n            <p>\n              Songs:{' '}\n              {songs.map(({ id, name }) => (\n                <span key={id}>{name}</span>\n              ))}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </React.Fragment>\n  );\n}\n\nexport default graphql(getAuthorsQuery)(SongList);\n","import React, { useState } from 'react';\nimport { graphql, compose } from 'react-apollo';\n\nimport { getAuthorsQuery } from '../graphql/queries';\nimport { addSongMutation } from '../graphql/mutations';\n\nconst GENRE_LIST = ['Rock', 'Pop', 'Rap', 'Reggae', 'Metal', 'Classic'];\n\nfunction SongForm({ history, authorsQuery, addSong }) {\n  const [name, setName] = useState('');\n  const [year, setYear] = useState('');\n  const [genre, setGenre] = useState('');\n  const [authorId, setAuthorId] = useState('');\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    if (name && year && genre && authorId) {\n      addSong({\n        variables: {\n          name,\n          year: parseInt(year, 10),\n          genre,\n          authorId\n        },\n        refetchQueries: [{ query: getAuthorsQuery }]\n      })\n        .then(() => {\n          history.push('/songs');\n        })\n        .catch(e => console.log(e));\n    }\n  }\n\n  const { loading, authors } = authorsQuery;\n\n  if (loading) {\n    return <h1>Fetching authors</h1>;\n  }\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <label>\n        <span>Song name</span>\n        <input type=\"text\" value={name} onChange={e => setName(e.target.value)} />\n      </label>\n      <label>\n        <span>Song year</span>\n        <input type=\"number\" value={year} onChange={e => setYear(e.target.value)} />\n      </label>\n      <label>\n        <span>Song genre</span>\n        <select value={genre} onChange={e => setGenre(e.target.value)}>\n          <option value=\"\">Select a genre</option>\n          {GENRE_LIST.map(option => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </label>\n      <label>\n        <span>Song author</span>\n        <select value={authorId} onChange={e => setAuthorId(e.target.value)}>\n          <option value=\"\">Select an author</option>\n          {authors.map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </label>\n      <button type=\"submit\">Create song</button>\n    </form>\n  );\n}\n\nexport default compose(\n  graphql(getAuthorsQuery, { name: 'authorsQuery' }),\n  graphql(addSongMutation, { name: 'addSong' })\n)(SongForm);\n","import React, { useState } from 'react';\nimport { graphql } from 'react-apollo';\n\nimport { addAuthorMutation } from '../graphql/mutations';\nimport { getAuthorsQuery } from '../graphql/queries';\n\nfunction AuthorForm({ history, addAuthor }) {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    if (name && age) {\n      addAuthor({\n        variables: {\n          name,\n          age: parseInt(age, 10)\n        },\n        refetchQueries: [{ query: getAuthorsQuery }]\n      })\n        .then(() => {\n          history.push('/authors');\n        })\n        .catch(e => console.log(e));\n    }\n  }\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <label>\n        <span>Author name</span>\n        <input type=\"text\" value={name} onChange={e => setName(e.target.value)} />\n      </label>\n      <label>\n        <span>Author age</span>\n        <input type=\"number\" value={age} onChange={e => setAge(e.target.value)} />\n      </label>\n      <button type=\"submit\">Create author</button>\n    </form>\n  );\n}\n\nexport default graphql(addAuthorMutation, { name: 'addAuthor' })(AuthorForm);\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { cookies } from 'brownies';\n\nimport Authentication from './components/Authentication';\nimport Home from './components/Home';\nimport SongList from './components/SongList';\nimport AuthorList from './components/AuthorList';\nimport SongForm from './components/SongForm';\nimport AuthorForm from './components/AuthorForm';\n\nimport './App.scss';\n\nfunction App({ authToken }) {\n  const isValidToken = !!authToken;\n  const [isAuthenticated, setIsAuthenticated] = useState(isValidToken);\n\n  function handleDeleteCookie() {\n    delete cookies.authToken;\n  }\n\n  useEffect(() => {\n    if (isValidToken && !isAuthenticated) {\n      setIsAuthenticated(true);\n    }\n\n    if (!isValidToken && isAuthenticated) {\n      setIsAuthenticated(false);\n    }\n  }, [isValidToken, isAuthenticated]);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <h1>Im working</h1>\n        {isAuthenticated && (\n          <button type=\"button\" onClick={handleDeleteCookie}>\n            Logout\n          </button>\n        )}\n        <Switch>\n          {isAuthenticated ? (\n            <React.Fragment>\n              <Route exact path=\"/songs\" component={SongList} />\n              <Route exact path=\"/authors\" component={AuthorList} />\n              <Route exact path=\"/create-song\" component={SongForm} />\n              <Route exact path=\"/create-author\" component={AuthorForm} />\n              <Route path=\"/\" component={Home} />\n            </React.Fragment>\n          ) : (\n            <Route path=\"/\" component={Authentication} />\n          )}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { cookies, subscribe } from 'brownies';\nimport App from '../App';\n\nconst SERVICE_URL = 'https://upgrade-songs.herokuapp.com';\n\nfunction AppApolloHoc({ children }) {\n  const { authToken } = cookies;\n  const [userAuthToken, setUserAuthToken] = useState(authToken);\n\n  // Setting up Apollo client\n  const client = new ApolloClient({\n    uri: `${SERVICE_URL}/graphql`,\n    headers: {\n      Authorization: authToken\n    }\n  });\n\n  subscribe(cookies, 'authToken', value => {\n    setUserAuthToken(value);\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <App authToken={userAuthToken} />\n    </ApolloProvider>\n  );\n}\n\nexport default AppApolloHoc;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport AppApolloHoc from './hocs/AppApolloHoc';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <AppApolloHoc />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}